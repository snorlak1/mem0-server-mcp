name: mem0-mcp-stack

services:
  # PostgreSQL with pgvector for vector storage
  postgres:
    image: pgvector/pgvector:pg17
    container_name: mem0-mcp-postgres
    restart: unless-stopped
    shm_size: "128mb"
    networks:
      - mem0_network
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-postgres}
    healthcheck:
      test: ["CMD", "pg_isready", "-q", "-d", "${POSTGRES_DB:-postgres}", "-U", "${POSTGRES_USER:-postgres}"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/migrations  # Mount migrations for auth setup
    ports:
      - "${POSTGRES_PORT:-5432}:5432"

  # Neo4j for graph storage
  neo4j:
    image: neo4j:5.26.4
    container_name: mem0-mcp-neo4j
    restart: unless-stopped
    networks:
      - mem0_network
    environment:
      - NEO4J_AUTH=${NEO4J_USERNAME:-neo4j}/${NEO4J_PASSWORD:-mem0graph}
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_apoc_import_file_use__neo4j__config=true
    healthcheck:
      test: wget http://localhost:7474 || exit 1
      interval: 5s
      timeout: 10s
      retries: 20
      start_period: 30s
    ports:
      - "${NEO4J_HTTP_PORT:-7474}:7474"  # HTTP
      - "${NEO4J_BOLT_PORT:-7687}:7687"  # Bolt
    volumes:
      - neo4j_data:/data

  # Mem0 REST API Server
  mem0:
    build:
      context: ./mem0-server
      dockerfile: Dockerfile
    container_name: mem0-mcp-server
    restart: unless-stopped
    networks:
      - mem0_network
    environment:
      - PYTHONUNBUFFERED=1

      # LLM Provider Configuration
      - LLM_PROVIDER=${LLM_PROVIDER:-ollama}

      # Ollama Configuration
      - OLLAMA_BASE_URL=${OLLAMA_BASE_URL:-http://192.168.1.2:11434}
      - OLLAMA_LLM_MODEL=${OLLAMA_LLM_MODEL:-qwen3:8b}
      - OLLAMA_EMBEDDING_MODEL=${OLLAMA_EMBEDDING_MODEL:-qwen3-embedding:8b}
      - OLLAMA_EMBEDDING_DIMS=${OLLAMA_EMBEDDING_DIMS:-4096}

      # OpenAI Configuration (optional)
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - OPENAI_LLM_MODEL=${OPENAI_LLM_MODEL:-gpt-4o}
      - OPENAI_EMBEDDING_MODEL=${OPENAI_EMBEDDING_MODEL:-text-embedding-3-small}
      - OPENAI_EMBEDDING_DIMS=${OPENAI_EMBEDDING_DIMS:-1536}

      # Anthropic Configuration (optional)
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - ANTHROPIC_MODEL=${ANTHROPIC_MODEL:-claude-4-sonnet}

      # Database Configuration
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-postgres}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_COLLECTION_NAME=${POSTGRES_COLLECTION_NAME:-memories}

      # Neo4j Configuration
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USERNAME=${NEO4J_USERNAME:-neo4j}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD:-mem0graph}

      # Other Configuration
      - HISTORY_DB_PATH=/app/history/history.db
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      postgres:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    ports:
      - "${MEM0_PORT:-8000}:8000"
    volumes:
      - ./history:/app/history
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # MCP Server for Claude Code integration
  mcp:
    build:
      context: ./mcp-server
      dockerfile: Dockerfile
    container_name: mem0-mcp-client
    restart: unless-stopped
    networks:
      - mem0_network
    environment:
      - PYTHONUNBUFFERED=1
      - MEM0_API_URL=http://mem0:8000
      - DEFAULT_USER_ID=${DEFAULT_USER_ID:-claude_code_mcp}
      - MCP_HOST=0.0.0.0
      - MCP_PORT=8080
      - PROJECT_ID_MODE=${PROJECT_ID_MODE:-auto}
      - PROJECT_DIR=${PROJECT_DIR:-/app}

      # PostgreSQL Configuration (for authentication)
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-postgres}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
    depends_on:
      postgres:
        condition: service_healthy
      mem0:
        condition: service_healthy
    ports:
      - "${MCP_PORT:-8080}:8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:
    driver: local
  neo4j_data:
    driver: local

networks:
  mem0_network:
    driver: bridge
